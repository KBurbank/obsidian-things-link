/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => ThingsLink
});
var import_obsidian5 = __toModule(require("obsidian"));

// node_modules/metaedit/src/parser.ts
var import_obsidian = __toModule(require("obsidian"));

// node_modules/metaedit/src/Types/metaType.ts
var MetaType;
(function(MetaType2) {
  MetaType2[MetaType2["YAML"] = 0] = "YAML";
  MetaType2[MetaType2["Dataview"] = 1] = "Dataview";
  MetaType2[MetaType2["Tag"] = 2] = "Tag";
  MetaType2[MetaType2["Option"] = 3] = "Option";
})(MetaType || (MetaType = {}));

// node_modules/metaedit/src/parser.ts
var MetaEditParser = class {
  constructor(app) {
    this.app = app;
  }
  getTagsForFile(file) {
    return __async(this, null, function* () {
      const cache = this.app.metadataCache.getFileCache(file);
      if (!cache)
        return [];
      const tags = cache.tags;
      if (!tags)
        return [];
      let mTags = [];
      tags.forEach((tag) => mTags.push({ key: tag.tag, content: tag.tag, type: MetaType.Tag }));
      return mTags;
    });
  }
  parseFrontmatter(file) {
    return __async(this, null, function* () {
      const fileCache = this.app.metadataCache.getFileCache(file);
      const frontmatter = fileCache == null ? void 0 : fileCache.frontmatter;
      if (!frontmatter)
        return [];
      const { start, end } = fileCache == null ? void 0 : fileCache.frontmatterPosition;
      const filecontent = yield this.app.vault.cachedRead(file);
      const yamlContent = filecontent.split("\n").slice(start.line, end.line).join("\n");
      const parsedYaml = (0, import_obsidian.parseYaml)(yamlContent);
      let metaYaml = [];
      for (const key in parsedYaml) {
        metaYaml.push({ key, content: parsedYaml[key], type: MetaType.YAML });
      }
      return metaYaml;
    });
  }
  parseInlineFields(file) {
    return __async(this, null, function* () {
      const content = yield this.app.vault.cachedRead(file);
      const regex = /[\[\(]?([^\n\r\(\[]*)::[ ]*([^\)\]\n\r]*)[\]\)]?/g;
      const properties = [];
      let match;
      while ((match = regex.exec(content)) !== null) {
        const key = match[1].trim();
        const value = match[2].trim();
        properties.push({ key, content: value, type: MetaType.Dataview });
      }
      return properties;
    });
  }
};

// node_modules/metaedit/src/metaController.ts
var import_obsidian2 = __toModule(require("obsidian"));
var MetaController = class {
  constructor(app, plugin) {
    this.hasTrackerPlugin = false;
    this.useTrackerPlugin = false;
    this.app = app;
    this.parser = new MetaEditParser(app);
    this.plugin = plugin;
    this.hasTrackerPlugin = !!this.app.plugins.plugins["obsidian-tracker"];
  }
  getPropertiesInFile(file) {
    return __async(this, null, function* () {
      const yaml = yield this.parser.parseFrontmatter(file);
      const inlineFields = yield this.parser.parseInlineFields(file);
      const tags = yield this.parser.getTagsForFile(file);
      return [...tags, ...yaml, ...inlineFields];
    });
  }
  addYamlProp(propName, propValue, file) {
    return __async(this, null, function* () {
      const fileContent = yield this.app.vault.read(file);
      const frontmatter = yield this.parser.parseFrontmatter(file);
      const isYamlEmpty = (!frontmatter || frontmatter.length === 0) && !fileContent.match(/^-{3}\s*\n*\r*-{3}/);
      if (frontmatter.some((value) => value.key === propName)) {
        new import_obsidian2.Notice(`Frontmatter in file '${file.name}' already has property '${propName}. Will not add.'`);
        return;
      }
      let splitContent = fileContent.split("\n");
      if (isYamlEmpty) {
        splitContent.unshift("---");
        splitContent.unshift(`${propName}: ${propValue}`);
        splitContent.unshift("---");
      } else {
        splitContent.splice(1, 0, `${propName}: ${propValue}`);
      }
      const newFileContent = splitContent.join("\n");
      yield this.app.vault.modify(file, newFileContent);
    });
  }
  deleteProperty(property, file) {
    return __async(this, null, function* () {
      const fileContent = yield this.app.vault.read(file);
      const splitContent = fileContent.split("\n");
      const regexp = new RegExp(`^s*${property.key}:`);
      const idx = splitContent.findIndex((s) => s.match(regexp));
      const newFileContent = splitContent.filter((v, i) => {
        if (i != idx)
          return true;
      }).join("\n");
      yield this.app.vault.modify(file, newFileContent);
    });
  }
  updateYamlProperty(property, newValue, file) {
    const fileCache = this.app.metadataCache.getFileCache(file);
    const frontMatter = fileCache.frontmatter;
    frontMatter[property.key] = newValue;
    return (0, import_obsidian2.stringifyYaml)(frontMatter);
  }
  updatePropertyInFile(property, newValue, file) {
    return __async(this, null, function* () {
      if (property.type === MetaType.YAML) {
        const updatedMetaData = `---
${this.updateYamlProperty(property, newValue, file)}
---`;
        const frontmatterPosition = this.app.metadataCache.getFileCache(file).frontmatterPosition;
        const fileContents = yield this.app.vault.read(file);
        const deleteFrom = frontmatterPosition.start.offset;
        const deleteTo = frontmatterPosition.end.offset;
        const newFileContents = fileContents.substring(0, deleteFrom) + updatedMetaData + fileContents.substring(deleteTo);
        yield this.app.vault.modify(file, newFileContents);
        return;
      }
      const fileContent = yield this.app.vault.read(file);
      const newFileContent = fileContent.split("\n").map((line) => {
        if (this.lineMatch(property, line)) {
          return this.updatePropertyLine(property, newValue, line);
        }
        return line;
      }).join("\n");
      yield this.app.vault.modify(file, newFileContent);
    });
  }
  escapeSpecialCharacters(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  }
  lineMatch(property, line) {
    const propertyRegex = new RegExp(`${this.escapeSpecialCharacters(property.key)}:{1,2}`);
    const tagRegex = new RegExp(`^s*${this.escapeSpecialCharacters(property.key)}`);
    if (property.key.contains("#")) {
      return tagRegex.test(line);
    }
    return propertyRegex.test(line);
  }
  updatePropertyLine(property, newValue, line) {
    let newLine;
    switch (property.type) {
      case MetaType.Dataview:
        const propertyRegex = new RegExp(`([\\(\\[]?)${this.escapeSpecialCharacters(property.key)}::[ ]*[^\\)\\]
\r]*(?:\\]])?([\\]\\)]?)`, "g");
        newLine = line.replace(propertyRegex, `$1${property.key}:: ${newValue}$2`);
        break;
      case MetaType.YAML:
        newLine = `${property.key}: ${newValue}`;
        break;
      case MetaType.Tag:
        if (this.useTrackerPlugin) {
          newLine = `${property.key}:${newValue}`;
        } else {
          const splitTag = property.key.split("/");
          if (splitTag.length === 1)
            newLine = `${splitTag[0]}/${newValue}`;
          else if (splitTag.length > 1) {
            const allButLast = splitTag.slice(0, splitTag.length - 1).join("/");
            newLine = `${allButLast}/${newValue}`;
          } else
            newLine = property.key;
        }
        break;
      default:
        newLine = property.key;
        break;
    }
    return newLine;
  }
  updateMultipleInFile(properties, file) {
    return __async(this, null, function* () {
      let fileContent = (yield this.app.vault.read(file)).split("\n");
      for (const prop of properties) {
        fileContent = fileContent.map((line) => {
          if (this.lineMatch(prop, line)) {
            return this.updatePropertyLine(prop, prop.content, line);
          }
          return line;
        });
      }
      const newFileContent = fileContent.join("\n");
      yield this.app.vault.modify(file, newFileContent);
    });
  }
};

// node_modules/metaedit/src/MetaEditApi.ts
var import_obsidian3 = __toModule(require("obsidian"));
var MetaEditApi = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  make() {
    return {
      update: this.getUpdateFunction(),
      getPropertyValue: this.getGetPropertyValueFunction(),
      createYamlProperty: this.getCreateYamlPropertyFunction(),
      getPropertiesInFile: this.getGetPropertiesInFile()
    };
  }
  getUpdateFunction() {
    return (propertyName, propertyValue, file) => __async(this, null, function* () {
      const targetFile = this.getFileFromTFileOrPath(file);
      if (!targetFile)
        return;
      const controller = new MetaController(this.plugin.app, this.plugin);
      const propsInFile = yield controller.getPropertiesInFile(targetFile);
      const targetProperty = propsInFile.find((prop) => prop.key === propertyName);
      if (!targetProperty)
        return;
      return controller.updatePropertyInFile(targetProperty, propertyValue, targetFile);
    });
  }
  getFileFromTFileOrPath(file) {
    let targetFile;
    if (file instanceof import_obsidian3.TFile)
      targetFile = file;
    if (typeof file === "string") {
      const abstractFile = this.plugin.app.vault.getAbstractFileByPath(file);
      if (abstractFile instanceof import_obsidian3.TFile) {
        targetFile = abstractFile;
      }
    }
    return targetFile;
  }
  getGetPropertyValueFunction() {
    return (propertyName, file) => __async(this, null, function* () {
      const targetFile = this.getFileFromTFileOrPath(file);
      if (!targetFile)
        return;
      const controller = new MetaController(this.plugin.app, this.plugin);
      const propsInFile = yield controller.getPropertiesInFile(targetFile);
      const targetProperty = propsInFile.find((prop) => prop.key === propertyName);
      if (!targetProperty)
        return;
      return targetProperty.content;
    });
  }
  getCreateYamlPropertyFunction() {
    return (propertyName, propertyValue, file) => __async(this, null, function* () {
      const targetFile = this.getFileFromTFileOrPath(file);
      if (!targetFile)
        return;
      const controller = new MetaController(this.plugin.app, this.plugin);
      yield controller.addYamlProp(propertyName, propertyValue, targetFile);
    });
  }
  getGetPropertiesInFile() {
    return (file) => __async(this, null, function* () {
      const targetFile = this.getFileFromTFileOrPath(file);
      if (!targetFile)
        return;
      const controller = new MetaController(this.plugin.app, this.plugin);
      return yield controller.getPropertiesInFile(targetFile);
    });
  }
};

// node_modules/metaedit/src/main.ts
var import_obsidian4 = __toModule(require("obsidian"));
var MetaEdit = class extends import_obsidian4.Plugin {
};

// main.ts
function getCurrentLine(editor, view) {
  const lineNumber = editor.getCursor().line;
  const lineText = editor.getLine(lineNumber);
  return lineText;
}
function prepareTask(line) {
  line = line.trim();
  line = line.replace(/^\W+|\W+$/, "");
  line = urlEncode(line);
  return line;
}
function urlEncode(line) {
  line = encodeURIComponent(line);
  return line;
}
function createProject(title, deepLink) {
  const project = `things:///add-project?title=${title}&notes=${deepLink}&x-success=obsidian://project-id`;
  window.open(project);
}
function createTask(line, deepLink) {
  const task = `things:///add?title=${line}&notes=${deepLink}&x-success=obsidian://task-id`;
  window.open(task);
}
var ThingsLink = class extends import_obsidian5.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.registerObsidianProtocolHandler("project-id", (id) => __async(this, null, function* () {
        const projectID = id["x-things-id"];
        const workspace = this.app.workspace;
        const manifest = { id: "something", name: "something else", author: "me", version: "1.0", minAppVersion: "v1", description: "" };
        const metaedit = new MetaEdit(this.app, manifest);
        const meta = new MetaEditApi(metaedit);
        const view = workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
        if (view == null) {
          return;
        } else {
          const editor = view.editor;
          const thingsDeepLink = `things:///show?id=${projectID}`;
          let fileText = editor.getValue();
          const lines = fileText.split("\n");
          const h1Index = lines.findIndex((line) => line.startsWith("#"));
          if (h1Index !== -1) {
            let startRange = {
              line: h1Index,
              ch: lines[h1Index].length
            };
            let endRange = {
              line: h1Index,
              ch: lines[h1Index].length
            };
            editor.replaceRange(`

[Things](${thingsDeepLink})`, startRange, endRange);
            yield metaedit.api.update("things link", `[Things Project Link](${thingsDeepLink})`, this.app.workspace.getActiveFile());
          } else {
            let startRange = {
              line: 0,
              ch: 0
            };
            let endRange = {
              line: 0,
              ch: 0
            };
            editor.replaceRange(`[Things](${thingsDeepLink})

`, startRange, endRange);
          }
        }
      }));
      this.addCommand({
        id: "create-things-project",
        name: "Create Things Project",
        editorCallback: (editor, view) => {
          const workspace = this.app.workspace;
          const fileTitle = workspace.getActiveFile();
          if (fileTitle == null) {
            return;
          } else {
            let fileName = urlEncode(fileTitle.name);
            fileName = fileName.replace(/\.md$/, "");
            const obsidianDeepLink = this.app.getObsidianUrl(fileTitle);
            const encodedLink = urlEncode(obsidianDeepLink);
            createProject(fileName, encodedLink);
          }
        }
      });
      this.registerObsidianProtocolHandler("task-id", (id) => __async(this, null, function* () {
        const taskID = id["x-things-id"];
        const view = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
        if (view == null) {
          return;
        } else {
          const editor = view.editor;
          const currentLine = getCurrentLine(editor, view);
          const firstLetterIndex = currentLine.search(/[a-zA-Z]|[0-9]/);
          const line = currentLine.substring(firstLetterIndex, currentLine.length);
          let editorPosition = view.editor.getCursor();
          const lineLength = view.editor.getLine(editorPosition.line).length;
          let startRange = {
            line: editorPosition.line,
            ch: firstLetterIndex
          };
          let endRange = {
            line: editorPosition.line,
            ch: lineLength
          };
          view.editor.replaceRange(`[${line}](things:///show?id=${taskID})`, startRange, endRange);
        }
      }));
      this.addCommand({
        id: "create-things-task",
        name: "Create Things Task",
        editorCallback: (editor, view) => {
          const workspace = this.app.workspace;
          const fileTitle = workspace.getActiveFile();
          if (fileTitle == null) {
            return;
          } else {
            let fileName = urlEncode(fileTitle.name);
            fileName = fileName.replace(/\.md$/, "");
            const obsidianDeepLink = this.app.getObsidianUrl(fileTitle);
            const encodedLink = urlEncode(obsidianDeepLink);
            const line = getCurrentLine(editor, view);
            const task = prepareTask(line);
            createTask(task, encodedLink);
          }
        }
      });
    });
  }
  onunload() {
  }
};
